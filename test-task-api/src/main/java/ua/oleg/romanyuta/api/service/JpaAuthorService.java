package ua.oleg.romanyuta.api.service;

import com.google.common.collect.Lists;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ua.oleg.romanyuta.dao.AuthorRepository;
import ua.oleg.romanyuta.domain.Author;
import ua.oleg.romanyuta.api.exception.BadRequestException;
import ua.oleg.romanyuta.api.exception.NotFoundException;
import ua.oleg.romanyuta.domain.AuthorShortInfo;
import ua.oleg.romanyuta.domain.Book;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
public class JpaAuthorService implements AuthorService {


    private AuthorRepository authorRepository;

    @Autowired
    public JpaAuthorService(AuthorRepository authorRepository) {
        this.authorRepository = authorRepository;
    }

    @Override
    public Author getAuthor(Long id) {
        Author author = authorRepository.findOne(id);
        if (author == null) {
            throw new NotFoundException(String.format("Author with id %s does not exist", id));
        }

        return author;
    }

    @Override
    public List<Author> getAllAuthors() {
        return Lists.newArrayList(authorRepository.findAll());
    }

    @Override
    public Author createAuthor(Author author) {
        if (author.getId() != null) {
            throw new BadRequestException("Unable to create new Author, id is autogenerated");
        }
        authorRepository.save(author);
        return author;
    }

    @Override
    public Author updateAuthor(Author author) {
        Long id = author.getId();
        if (id == null) {
            throw new BadRequestException("Unable to update, id must be provided");
        }
        Author authorFromDb = authorRepository.findOne(id);
        if (authorFromDb == null) {
            throw new NotFoundException(String.format("Author with id %s does not exist", id));
        }

        authorRepository.save(author);

        return author;
    }

    @Override
    public AuthorShortInfo getAuthorShortInfo(Long id) {
        Author author = getAuthor(id);

        return createAuthorShortInfo(author);
    }

    private AuthorShortInfo createAuthorShortInfo(Author author) {
        AuthorShortInfo result = new AuthorShortInfo();
        result.setFirstName(author.getFirstName());
        result.setLastName(author.getLastName());

        List<String> bookTitles = getBookTitles(author.getBooks());
        result.setBookTitles(bookTitles);

        Integer age = calculateAge(author.getBirthDate());
        result.setAge(age);

        return result;
    }

    private List<String> getBookTitles(List<Book> books) {
        List<String> result = new ArrayList<>();
        if (books != null) {
            for (Book book : books) {
                if (book != null && book.getTitle() != null) {
                    result.add(book.getTitle());
                }
            }
        }

        return result;
    }

    private Integer calculateAge(Date birth) {
        if (birth == null) {
            return null;
        }

        DateTime birthDate = new DateTime(birth);
        DateTime currentDate = new DateTime();

        return currentDate.minusYears(birthDate.getYear()).getYear();
    }
}
